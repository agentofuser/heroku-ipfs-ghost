#!/usr/bin/env node
// Ghost Configuration for Heroku

var fs = require('fs');
var path = require('path');
var url = require('url');

var envValues = require('./common/env-values');
var appRoot = path.join(__dirname, '..');

function createConfig() {
  var fileStorage, storage, storageOptions;

  // When deploying from git rather then a Heroku deploy button, Heroku doesn't
  // read app.json and doesn't set the environment variables configured there.
  // The `PUBLIC_URL` envvar is required, so if it's missing we know app.json
  // was skipped, and we read it explictly.
  if (!process.env.PUBLIC_URL) {
    const appJson = JSON.parse(fs.readFileSync(`${appRoot}/app.json`, 'utf8'));
    process.env = {...process.env, ...appJson.env}
    process.env.PUBLIC_URL = appJson.env.PUBLIC_URL.value;
    process.env.IPFS_GATEWAY_URL = appJson.env.IPFS_GATEWAY_URL.value;
  }

  if(!!process.env.INTERPLANETARY_FISSION_USERNAME && !!process.env.INTERPLANETARY_FISSION_PASSWORD) {
    fileStorage = true;
    storageOptions = {
      username: process.env.INTERPLANETARY_FISSION_USERNAME,
      password: process.env.INTERPLANETARY_FISSION_PASSWORD
    };

    if(!!process.env.INTERPLANETARY_FISSION_URL) {
      storageOptions.apiURL = process.env.INTERPLANETARY_FISSION_URL;
    }

    if(!!process.env.IPFS_GATEWAY_URL) {
      storageOptions.gatewayURL = process.env.IPFS_GATEWAY_URL;
    }

    storage = {
      active: "ghost-storage-adapter-ipfs",
      "ghost-storage-adapter-ipfs": storageOptions
    };
  } else {
    fileStorage = false
    storage = {}
  }

  config = {
    url: process.env.PUBLIC_URL,
    logging: {
      level: "info",
      transports: ["stdout"]
    },
    mail: {
      transport: 'SMTP',
      options: {
        service: 'Mailgun',
        auth: {
          user: process.env.MAILGUN_SMTP_LOGIN,
          pass: process.env.MAILGUN_SMTP_PASSWORD
        }
      }
    },
    fileStorage: fileStorage,
    storage: storage,
    database: {
      client: 'mysql',
      connection: getMysqlConfig(envValues.mysqlDatabaseUrl),
      pool: { min: 0, max: 5 },
      debug: false
    },
    server: {
      host: '0.0.0.0',
      port: process.env.PORT
    },
    paths: {
      contentPath: path.join(appRoot, '/content/')
    }
  };

  return config;
}

function getMysqlConfig(connectionUrl) {
  if (connectionUrl == null) {
    return {};
  }

  var dbConfig = url.parse(connectionUrl);
  if (dbConfig == null) {
    return {};
  }

  var dbAuth = dbConfig.auth ? dbConfig.auth.split(':') : [];
  var dbUser = dbAuth[0];
  var dbPassword = dbAuth[1];

  if (dbConfig.pathname == null) {
    var dbName = 'ghost';
  } else {
    var dbName = dbConfig.pathname.split('/')[1];
  }

  var dbConnection = {
    host: dbConfig.hostname,
    port: dbConfig.port || '3306',
    user: dbUser,
    password: dbPassword,
    database: dbName
  };
  return dbConnection;
}

var configContents = JSON.stringify(createConfig(), null, 2);
fs.writeFileSync(path.join(appRoot, 'config.production.json'), configContents);
